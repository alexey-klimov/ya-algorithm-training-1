/* A. Кондиционер
 *
 * В офисе, где работает программист Петр, установили кондиционер нового типа. Этот кондиционер
 * отличается особой простотой в управлении. У кондиционера есть всего лишь два управляемых
 * параметра: желаемая температура и режим работы.
 * Кондиционер может работать в следующих четырех режимах:
 * «freeze» — охлаждение. В этом режиме кондиционер может только уменьшать температуру. Если
 * температура в комнате и так не больше желаемой, то он выключается.
 * «heat» — нагрев. В этом режиме кондиционер может только увеличивать температуру. Если температура
 * в комнате и так не меньше желаемой, то он выключается.
 *
 * «auto» — автоматический режим. В этом режиме кондиционер может как увеличивать, так и уменьшать
 * температуру в комнате до желаемой.
 *
 * «fan» — вентиляция. В этом режиме кондиционер осуществляет только вентиляцию воздуха и не
 * изменяет температуру в комнате.
 *
 * Кондиционер достаточно мощный, поэтому при настройке на правильный режим работы он за час доводит
 * температуру в комнате до желаемой.
 *
 * Требуется написать программу, которая по заданной температуре в комнате troom, установленным на
 * кондиционере желаемой температуре tcond и режиму работы определяет температуру, которая
 * установится в комнате через час.
 *
 * Формат ввода
 * Первая строка входного файла содержит два целых числа troom, и tcond, разделенных ровно одним
 * пробелом (–50 ≤ troom ≤ 50, –50 ≤ tcond ≤ 50).
 *
 * Вторая строка содержит одно слово, записанное строчными буквами латинского алфавита — режим
 * работы кондиционера.
 *
 * Формат вывода
 * Выходной файл должен содержать одно целое число — температуру, которая установится в комнате
 * через час.
 */

#include <iostream>
#include <sstream>

#include "kisstest.h"

using namespace std::string_literals;

class Solution {
public:
    template <typename In, typename Out>
    static void Run(In& in, Out& out) {
        int troom, tcond;
        in >> troom >> tcond;

        std::string mode;
        in >> mode;

        if ("freeze"s == mode) {
            if (troom > tcond) {
                troom = tcond;
            }
        } else if ("heat"s == mode) {
            if (troom < tcond) {
                troom = tcond;
            }
        } else if ("auto"s == mode) {
            troom = tcond;
        }

        out << troom << std::endl;
    }
};

void Test1() {
    std::istringstream in;
    std::ostringstream out;

    in.str("10 20\n"s + "heat"s);
    Solution::Run(in, out);
    KISSTEST::ASSERT_EQUAL(out.str(), "20\n"s);
}

void Test2() {
    std::istringstream in;
    std::ostringstream out;

    in.str("10 20\n"s + "freeze"s);
    Solution::Run(in, out);
    KISSTEST::ASSERT_EQUAL(out.str(), "10\n"s);
}

void TestSolution() {
    Test1();
    Test2();
}

int main() {
    TestSolution();
    // Solution::Run(std::cin, std::cout);

    return 0;
}
